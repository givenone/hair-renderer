#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in float vertex_color;

out vec4 fragmentColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

//uniform vec3 sight_vec;
//uniform float hair_radius;
//uniform vec3 hair_center;

  
void main(){
  // Output position of the vertex, in clip space : MVP * position
  gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
  float hair_radius = 0.08;
  vec3 sight_vec = vec3(0,0,1);
  vec3 hair_center = vec3(0, 1.7, 0.1);
  float color = min(0.8, vertex_color * (1.0-dot(vertexPosition_modelspace-hair_center, sight_vec)/hair_radius));
  //float color=vertex_color;
  fragmentColor = vec4(0.2 * color, 0.2 * color, 0.2 *color, 1-color );
  //fragmentColor = vertex_color;
}